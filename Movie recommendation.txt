Movie recommendation


import numpy as np
import pandas as pd

movies = pd.read_csv("tmdb_5000_movies.csv")
credits =pd.read_csv("tmdb_5000_credits.csv")

movies.head()

credits.head()

movies = movies.merge(credits,on='title')

#need = genres id keywords title overview  cast crew
movies = movies[['movie_id','title','overview','genres','keywords','cast','crew']]

movies.iloc[0].genres

def convert(obj):
    L= []
    for i in ast.literal_eval(obj):
        L.append(i['name'])
    return L        

import ast

movies['genres'] = movies['genres'].apply(convert)

movies['keywords'] = movies['keywords'].apply(convert)

movies['cast'][0]

def convertcast(obj):
    L= []
    count=0
    for i in ast.literal_eval(obj):
        if count !=3:
            L.append(i['name'])
            count+=1
        else:
            break
    return L 

movies['cast'] = movies['cast'].apply(convertcast)

movies['crew'][0]

def fetchdir(obj):
    L= []
    for i in ast.literal_eval(obj):
        if i['job'] == 'Director':
           L.append(i['name'])
           break
    return L 

movies['crew'] =movies['crew'].apply(fetchdir)

movies.head()

movies['overview'] = movies['overview'].apply(lambda x:x.split())

movies['genres'] =movies['genres'].apply(lambda x:[i.replace(" ","")for i in x])
movies['keywords'] =movies['keywords'].apply(lambda x:[i.replace(" ","")for i in x])
movies['cast'] =movies['cast'].apply(lambda x:[i.replace(" ","")for i in x])
movies['crew'] =movies['crew'].apply(lambda x:[i.replace(" ","")for i in x])
movies.head()

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew'] 


new_df = movies[['movie_id','title','tags']]

new_df['tags'] = new_df['tags'].apply(lambda x:" ".join(x))

df['tags'][0]

df['tags'] = df['tags'].apply(lambda x:x.lower())

from sklearn.feature_extraction.text import CountVectorizer

cv = CountVectorizer(max_features=5000,stop_words='english')

vectors = cv.fit_transform(df['tags']).toarray()

vectors

len(cv.get_feature_names_out())

from nltk.stem.porter import PorterStemmer

ps=PorterStemmer()

def stem(text):
    y = []
    for i in text.split():
        y.append(ps.stem(i))
    return " ".join(y)


df['tags'] = df['tags'].apply(stem)

from sklearn.metrics.pairwise import cosine_similarity


sim = cosine_similarity(vectors)

sorted(list(enumerate(sim[0])),reverse=True,key=lambda x:x[1])[1:6]

def recommend(movie):
    movie_index = df[df['title'] == movie].index[0]
    distances = sim[movie_index]
    movies_list = sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]
    
    for i in movies_list:
        print(df.iloc[i[0]].title)

df[df['title'] == 'Batman Begins'].index[0]

import pickle
pickle.dump(df.to_dict(),open('movie_dict.pkl','wb'))
pickle.dump(sim,open('sim.pkl','wb'))

















